/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balances"
      | "deposit"
      | "getGoal"
      | "getMicroSaveStatus"
      | "getUserBalance"
      | "goals"
      | "microSaveEnabled"
      | "setGoal"
      | "toggleMicroSave"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMicroSaveStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "goals", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "microSaveEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGoal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleMicroSave",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGoal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMicroSaveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "microSaveEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGoal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleMicroSave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  getGoal: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getMicroSaveStatus: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  getUserBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  goals: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  microSaveEnabled: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  setGoal: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  toggleMicroSave: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getGoal"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMicroSaveStatus"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "goals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "microSaveEnabled"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setGoal"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggleMicroSave"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
