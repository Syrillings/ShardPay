/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Vault, VaultInterface } from "../Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getGoal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getMicroSaveStatus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "goals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "microSaveEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setGoal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "toggleMicroSave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061047e806100206000396000f3fe6080604052600436106100915760003560e01c80634b29c448116100595780634b29c448146101965780639ae8a439146101c35780639db48bbb1461020c578063b6b55f2514610242578063d92e6b501461025557600080fd5b80631a02859f14610096578063276bb0b4146100d657806327e235e3146101135780632e1a7d4d146101405780634773489214610160575b600080fd5b3480156100a257600080fd5b506100c36100b136600461039b565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156100e257600080fd5b506101116100f13660046103cb565b336000908152600260205260409020805460ff1916911515919091179055565b005b34801561011f57600080fd5b506100c361012e36600461039b565b60006020819052908152604090205481565b34801561014c57600080fd5b5061011161015b3660046103ed565b610285565b34801561016c57600080fd5b506100c361017b36600461039b565b6001600160a01b031660009081526020819052604090205490565b3480156101a257600080fd5b506101116101b13660046103ed565b33600090815260016020526040902055565b3480156101cf57600080fd5b506101fc6101de36600461039b565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020016100cd565b34801561021857600080fd5b506100c361022736600461039b565b6001600160a01b031660009081526001602052604090205490565b6101116102503660046103ed565b610331565b34801561026157600080fd5b506101fc61027036600461039b565b60026020526000908152604090205460ff1681565b336000908152602081905260409020548111156102dc5760405162461bcd60e51b815260206004820152601060248201526f139bdd08195b9bdd59da081cd85d995960821b60448201526064015b60405180910390fd5b33600090815260208190526040812080548392906102fb90849061041c565b9091555050604051339082156108fc029083906000818181858888f1935050505015801561032d573d6000803e3d6000fd5b5050565b8034146103745760405162461bcd60e51b815260206004820152601160248201527014d95b9908195e1858dd08185b5bdd5b9d607a1b60448201526064016102d3565b3360009081526020819052604081208054839290610393908490610435565b909155505050565b6000602082840312156103ad57600080fd5b81356001600160a01b03811681146103c457600080fd5b9392505050565b6000602082840312156103dd57600080fd5b813580151581146103c457600080fd5b6000602082840312156103ff57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561042f5761042f610406565b92915050565b8082018082111561042f5761042f61040656fea2646970667358221220cd65440ca610d6540d585428978359174c70ca40712db7e7095613901f524e7864736f6c63430008140033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Vault & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Vault__factory {
    return super.connect(runner) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new Interface(_abi) as VaultInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Vault {
    return new Contract(address, _abi, runner) as unknown as Vault;
  }
}
